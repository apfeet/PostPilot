version: '3.9'
services:
  frontend:
    env_file:
      - .env
    build:
      context: ./FrontEnd
      dockerfile: ${MODALITY}_Dockerfile
    volumes:
      - ./FrontEnd/PostPilot-frontEND:/app 
      - /app/node_modules                    
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    expose:
      - "${FRONTEND_PORT}"
    environment:
      - CHOKIDAR_USEPOLLING=true
    networks:
      - postpilot_network

  backend:
    env_file:
      - .env
    build:
      context: ./BackEnd
      dockerfile: ${MODALITY}_Dockerfile
    volumes:
      - ./BackEnd:/app
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    expose:
      - "${BACKEND_PORT}"
    depends_on:
      - mongodb
    environment:
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - MONGODB_HOST=${MONGODB_HOST}
    networks:
      - postpilot_network

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - ./DataBase:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${DB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${DB_PASSWORD}
    networks:
      - postpilot_network
    command: [ "mongod", "--quiet", "--logpath", "/dev/null" ]

  nginx:
      image: nginx:latest
      env_file:
        - .env
      ports:
        - "${NGINX_PORT}:${NGINX_PORT}"
        - "443:443"
      volumes:
        - ./nginx.conf.template:/etc/nginx/nginx.conf.template:ro
        - ./entrypoint.sh:/entrypoint.sh:ro
        - ./ssl:/etc/nginx/ssl
      depends_on:
        - frontend
        - backend
      networks:
        - postpilot_network
      entrypoint: /bin/sh -c "/entrypoint.sh"

  reportlogsandstats:
    build:
      context: ./reportlogsandstats
      dockerfile: Dockerfile
    container_name: reportlogsandstats
    volumes:
      - ./reportlogsandstats:/app
      - ./reportlogsandstats/logs:/app/logs
    working_dir: /app
    env_file:
      - .env
    networks:
      - postpilot_network
    depends_on:
      - mongodb

networks:
  postpilot_network:
    driver: bridge

volumes:
  env_frontend_volume:
    driver: local
    driver_opts:
      type: none
      device: ./FrontEnd/PostPilot-frontEND
      o: bind
  prod_frontend_volume:
    driver: local
    driver_opts:
      type: none
      device: ./FrontEnd/PostPilot-frontEND/dist
      o: bind
